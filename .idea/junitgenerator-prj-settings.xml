<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="JUnitGeneratorProjectSettings">
    <option name="outputFilePattern" value="${SOURCEPATH}/test/java/${PACKAGE}/${FILENAME}" />
    <option name="selectedTemplateKey" value="JUnit 4" />
    <option name="vmTemplates">
      <map>
        <entry key="JUnit 3" value="######################################################################################## &#10;## &#10;## Available variables: &#10;##         $entryList.methodList - List of method composites &#10;##         $entryList.privateMethodList - List of private method composites &#10;##         $entryList.fieldList - ArrayList of class scope field names &#10;##         $entryList.className - class name &#10;##         $entryList.packageName - package name &#10;##         $today - Todays date in MM/dd/yyyy format &#10;## &#10;##            MethodComposite variables: &#10;##                $method.name - Method Name &#10;##                $method.signature - Full method signature in String form &#10;##                $method.reflectionCode - list of strings representing commented out reflection code to access method (Private Methods) &#10;##                $method.paramNames - List of Strings representing the method's parameters' names &#10;##                $method.paramClasses - List of Strings representing the method's parameters' classes &#10;## &#10;## You can configure the output class name using &quot;testClass&quot; variable below. &#10;## Here are some examples: &#10;## Test${entry.ClassName} - will produce TestSomeClass &#10;## ${entry.className}Test - will produce SomeClassTest &#10;## &#10;######################################################################################## &#10;## &#10;#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end &#10;## Iterate through the list and generate testcase for every entry. &#10;#foreach ($entry in $entryList) &#10;#set( $testClass=&quot;${entry.className}Test&quot;) &#10;## &#10;package test.$entry.packageName; &#10;&#10;import junit.framework.Test; &#10;import junit.framework.TestSuite; &#10;import junit.framework.TestCase; &#10;&#10;/** &#10;* ${entry.className} Tester. &#10;* &#10;* @author &lt;Authors name&gt; &#10;* @since &lt;pre&gt;$today&lt;/pre&gt; &#10;* @version 1.0 &#10;*/ &#10;public class $testClass extends TestCase { &#10;public $testClass(String name) { &#10;super(name); &#10;} &#10;&#10;public void setUp() throws Exception { &#10;super.setUp(); &#10;} &#10;&#10;public void tearDown() throws Exception { &#10;super.tearDown(); &#10;} &#10;&#10;#foreach($method in $entry.methodList) &#10;/** &#10;* &#10;* Method: $method.signature &#10;* &#10;*/ &#10;public void test#cap(${method.name})() throws Exception { &#10;//TODO: Test goes here... &#10;} &#10;&#10;#end &#10;&#10;#foreach($method in $entry.privateMethodList) &#10;/** &#10;* &#10;* Method: $method.signature &#10;* &#10;*/ &#10;public void test#cap(${method.name})() throws Exception { &#10;//TODO: Test goes here... &#10;#foreach($string in $method.reflectionCode) &#10;$string &#10;#end &#10;} &#10;&#10;#end &#10;&#10;public static Test suite() { &#10;return new TestSuite(${testClass}.class); &#10;} &#10;} &#10;#end" />
        <entry key="JUnit 4" value="######################################################################################## &#10;## &#10;## Available variables: &#10;##         $entryList.methodList - List of method composites &#10;##         $entryList.privateMethodList - List of private method composites &#10;##         $entryList.fieldList - ArrayList of class scope field names &#10;##         $entryList.className - class name &#10;##         $entryList.packageName - package name &#10;##         $today - Todays date in MM/dd/yyyy format &#10;## &#10;##            MethodComposite variables: &#10;##                $method.name - Method Name &#10;##                $method.signature - Full method signature in String form &#10;##                $method.reflectionCode - list of strings representing commented out reflection code to access method (Private Methods) &#10;##                $method.paramNames - List of Strings representing the method's parameters' names &#10;##                $method.paramClasses - List of Strings representing the method's parameters' classes &#10;## &#10;## You can configure the output class name using &quot;testClass&quot; variable below. &#10;## Here are some examples: &#10;## Test${entry.ClassName} - will produce TestSomeClass &#10;## ${entry.className}Test - will produce SomeClassTest &#10;## &#10;######################################################################################## &#10;## &#10;#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end &#10;## Iterate through the list and generate testcase for every entry. &#10;#foreach ($entry in $entryList) &#10;#set( $testClass=&quot;${entry.className}Test&quot;) &#10;## &#10;package $entry.packageName; &#10;&#10;import com.alibaba.fastjson.JSONObject;&#10;import com.pcloud.promotion.activite.dto.GroupGoodDTO;&#10;import com.pcloud.promotion.activite.dto.GroupShareDTO;&#10;import com.pcloud.promotion.activite.dto.GroupUpdateDTO;&#10;import org.junit.Test;&#10;import org.junit.Before;&#10;import org.junit.After;&#10;import org.junit.runner.RunWith;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.test.context.junit4.SpringRunner;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import org.springframework.test.web.servlet.MvcResult;&#10;import org.springframework.test.web.servlet.RequestBuilder;&#10;import org.springframework.test.web.servlet.ResultActions;&#10;import org.springframework.test.web.servlet.result.MockMvcResultHandlers;&#10;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;&#10;&#10;/** &#10;* ${entry.className} Tester. &#10;* controller test module&#10;* @author &lt;Authors name&gt; &#10;* @since &lt;pre&gt;$today&lt;/pre&gt; &#10;* @version 1.0 &#10;*/ &#10;@RunWith(SpringRunner.class)&#10;@SpringBootTest&#10;@AutoConfigureMockMvc&#10;public class $testClass { &#10;&#10;&#9;@Autowired&#10;    private MockMvc mockMvc;&#10;&#9;&#10;&#9;private static final String token = &quot;Hh7wdadqQjGMFpeK0F3sLAAeJgioyB5i&quot;;&#10;&#9;//start&#10;    long startTimeMillis;&#10;    //end&#10;    long endTimeMillis;&#10;&#9;&#10;&#9;@Before&#10;&#9;public void before() throws Exception { &#10;&#9;&#9;startTimeMillis=System.currentTimeMillis();&#10;&#9;} &#10;&#10;&#9;@After&#10;&#9;public void after() throws Exception { &#10;&#9;&#9;endTimeMillis= System.currentTimeMillis();&#10;&#9;&#9;System.out.println(&quot;【time cost】&quot;+(endTimeMillis-startTimeMillis) + &quot;ms&quot;);&#10;&#9;} &#10;&#9;&#10;&#9;/**&#10;     * formate output&#10;     * @param perform&#10;     * @throws Exception&#10;     */&#10;    private void printResult(ResultActions perform) throws Exception {&#10;        MvcResult mvcResult = perform&#10;                //status code&#10;                .andExpect(status().isOk())&#10;                //output result&#10;                .andDo(MockMvcResultHandlers.print())&#10;                .andReturn();&#10;&#10;&#9;&#9;//other posthandle&#10;        //status code&#10;        int status = mvcResult.getResponse().getStatus();&#10;        //response content&#10;        String content = mvcResult.getResponse().getContentAsString();&#10;        //do assert self-defined&#10;        //Assert.assertEquals(&quot;return status not equals 200&quot;, 200, status);&#10;    }&#10;&#10;&#9;#foreach($method in $entry.methodList) &#10;&#9;/** &#10;&#9;* &#10;&#9;* Method: $method.signature  &#10;&#9;*/ &#10;&#9;@Test&#10;&#9;public void test#cap(${method.name})() throws Exception { &#10;&#9;&#9;//TODO: set url &#10;&#9;&#9;String url = &quot;&quot;;&#10;&#9;&#9;//TODO: set parameters &#10;&#9;&#9;&#10;&#9;&#9;//TODO: if transform objest to jsonStr&#10;&#9;&#9;//String requestJson = JSONObject.toJSONString(objest);&#10;&#9;&#9;String jsonStr =&quot;&quot;;&#10;&#9;&#9;RequestBuilder request = get(url)&#10;                .contentType(MediaType.APPLICATION_JSON_UTF8)&#10;&#9;&#9;&#9;&#9;//TODO: if is post request&#10;                //.content(requestJson)&#10;&#9;&#9;&#9;&#9;//TODO: if has token&#10;                //.header(&quot;token&quot;,token)&#10;&#9;&#9;&#9;&#9;;&#10;        ResultActions perform = mockMvc.perform(request);&#10;        this.printResult(perform);&#10;&#9;} &#10;&#10;&#9;#end &#10;&#10;&#9;#foreach($method in $entry.privateMethodList) &#10;&#9;/** &#10;&#9;* &#10;&#9;* Method: $method.signature  &#10;&#9;*/ &#10;&#9;@Test&#10;&#9;public void test#cap(${method.name})() throws Exception { &#10;&#9;//TODO: Test goes here... &#10;&#9;#foreach($string in $method.reflectionCode) &#10;&#9;$string &#10;&#9;#end &#10;&#9;} &#10;&#10;#end &#10;} &#10;#end" />
      </map>
    </option>
  </component>
</project>